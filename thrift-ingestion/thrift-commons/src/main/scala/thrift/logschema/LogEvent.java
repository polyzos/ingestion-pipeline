/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.logschema;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-03-09")
public class LogEvent implements org.apache.thrift.TBase<LogEvent, LogEvent._Fields>, java.io.Serializable, Cloneable, Comparable<LogEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogEvent");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POLLSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("pollster", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FAVOR_FIELD_DESC = new org.apache.thrift.protocol.TField("favor", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("oppose", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogEventTupleSchemeFactory();

  public short version; // required
  public @org.apache.thrift.annotation.Nullable String currentDate; // required
  public @org.apache.thrift.annotation.Nullable String startDate; // required
  public @org.apache.thrift.annotation.Nullable String endDate; // required
  public @org.apache.thrift.annotation.Nullable String pollster; // required
  public int favor; // required
  public int oppose; // required
  public int total; // required
  public @org.apache.thrift.annotation.Nullable String url; // required
  /**
   * 
   * @see DeviceType
   */
  public @org.apache.thrift.annotation.Nullable DeviceType device; // required
  /**
   * 
   * @see LogType
   */
  public @org.apache.thrift.annotation.Nullable LogType message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    CURRENT_DATE((short)2, "currentDate"),
    START_DATE((short)3, "startDate"),
    END_DATE((short)4, "endDate"),
    POLLSTER((short)5, "pollster"),
    FAVOR((short)6, "favor"),
    OPPOSE((short)7, "oppose"),
    TOTAL((short)8, "total"),
    URL((short)9, "url"),
    /**
     * 
     * @see DeviceType
     */
    DEVICE((short)10, "device"),
    /**
     * 
     * @see LogType
     */
    MESSAGE((short)11, "message");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // CURRENT_DATE
          return CURRENT_DATE;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // POLLSTER
          return POLLSTER;
        case 6: // FAVOR
          return FAVOR;
        case 7: // OPPOSE
          return OPPOSE;
        case 8: // TOTAL
          return TOTAL;
        case 9: // URL
          return URL;
        case 10: // DEVICE
          return DEVICE;
        case 11: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __FAVOR_ISSET_ID = 1;
  private static final int __OPPOSE_ISSET_ID = 2;
  private static final int __TOTAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CURRENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("currentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "timestamp")));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "timestamp")));
    tmpMap.put(_Fields.POLLSTER, new org.apache.thrift.meta_data.FieldMetaData("pollster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAVOR, new org.apache.thrift.meta_data.FieldMetaData("favor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPPOSE, new org.apache.thrift.meta_data.FieldMetaData("oppose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeviceType.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogEvent.class, metaDataMap);
  }

  public LogEvent() {
  }

  public LogEvent(
    short version,
    String currentDate,
    String startDate,
    String endDate,
    String pollster,
    int favor,
    int oppose,
    int total,
    String url,
    DeviceType device,
    LogType message)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.currentDate = currentDate;
    this.startDate = startDate;
    this.endDate = endDate;
    this.pollster = pollster;
    this.favor = favor;
    setFavorIsSet(true);
    this.oppose = oppose;
    setOpposeIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.url = url;
    this.device = device;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogEvent(LogEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetCurrentDate()) {
      this.currentDate = other.currentDate;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetPollster()) {
      this.pollster = other.pollster;
    }
    this.favor = other.favor;
    this.oppose = other.oppose;
    this.total = other.total;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDevice()) {
      this.device = other.device;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public LogEvent deepCopy() {
    return new LogEvent(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.currentDate = null;
    this.startDate = null;
    this.endDate = null;
    this.pollster = null;
    setFavorIsSet(false);
    this.favor = 0;
    setOpposeIsSet(false);
    this.oppose = 0;
    setTotalIsSet(false);
    this.total = 0;
    this.url = null;
    this.device = null;
    this.message = null;
  }

  public short getVersion() {
    return this.version;
  }

  public LogEvent setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getCurrentDate() {
    return this.currentDate;
  }

  public LogEvent setCurrentDate(@org.apache.thrift.annotation.Nullable String currentDate) {
    this.currentDate = currentDate;
    return this;
  }

  public void unsetCurrentDate() {
    this.currentDate = null;
  }

  /** Returns true if field currentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentDate() {
    return this.currentDate != null;
  }

  public void setCurrentDateIsSet(boolean value) {
    if (!value) {
      this.currentDate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getStartDate() {
    return this.startDate;
  }

  public LogEvent setStartDate(@org.apache.thrift.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getEndDate() {
    return this.endDate;
  }

  public LogEvent setEndDate(@org.apache.thrift.annotation.Nullable String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getPollster() {
    return this.pollster;
  }

  public LogEvent setPollster(@org.apache.thrift.annotation.Nullable String pollster) {
    this.pollster = pollster;
    return this;
  }

  public void unsetPollster() {
    this.pollster = null;
  }

  /** Returns true if field pollster is set (has been assigned a value) and false otherwise */
  public boolean isSetPollster() {
    return this.pollster != null;
  }

  public void setPollsterIsSet(boolean value) {
    if (!value) {
      this.pollster = null;
    }
  }

  public int getFavor() {
    return this.favor;
  }

  public LogEvent setFavor(int favor) {
    this.favor = favor;
    setFavorIsSet(true);
    return this;
  }

  public void unsetFavor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAVOR_ISSET_ID);
  }

  /** Returns true if field favor is set (has been assigned a value) and false otherwise */
  public boolean isSetFavor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAVOR_ISSET_ID);
  }

  public void setFavorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAVOR_ISSET_ID, value);
  }

  public int getOppose() {
    return this.oppose;
  }

  public LogEvent setOppose(int oppose) {
    this.oppose = oppose;
    setOpposeIsSet(true);
    return this;
  }

  public void unsetOppose() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPPOSE_ISSET_ID);
  }

  /** Returns true if field oppose is set (has been assigned a value) and false otherwise */
  public boolean isSetOppose() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPPOSE_ISSET_ID);
  }

  public void setOpposeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPPOSE_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public LogEvent setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getUrl() {
    return this.url;
  }

  public LogEvent setUrl(@org.apache.thrift.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  /**
   * 
   * @see DeviceType
   */
  @org.apache.thrift.annotation.Nullable
  public DeviceType getDevice() {
    return this.device;
  }

  /**
   * 
   * @see DeviceType
   */
  public LogEvent setDevice(@org.apache.thrift.annotation.Nullable DeviceType device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  /**
   * 
   * @see LogType
   */
  @org.apache.thrift.annotation.Nullable
  public LogType getMessage() {
    return this.message;
  }

  /**
   * 
   * @see LogType
   */
  public LogEvent setMessage(@org.apache.thrift.annotation.Nullable LogType message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    case CURRENT_DATE:
      if (value == null) {
        unsetCurrentDate();
      } else {
        setCurrentDate((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case POLLSTER:
      if (value == null) {
        unsetPollster();
      } else {
        setPollster((String)value);
      }
      break;

    case FAVOR:
      if (value == null) {
        unsetFavor();
      } else {
        setFavor((Integer)value);
      }
      break;

    case OPPOSE:
      if (value == null) {
        unsetOppose();
      } else {
        setOppose((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((DeviceType)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((LogType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case CURRENT_DATE:
      return getCurrentDate();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case POLLSTER:
      return getPollster();

    case FAVOR:
      return getFavor();

    case OPPOSE:
      return getOppose();

    case TOTAL:
      return getTotal();

    case URL:
      return getUrl();

    case DEVICE:
      return getDevice();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case CURRENT_DATE:
      return isSetCurrentDate();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case POLLSTER:
      return isSetPollster();
    case FAVOR:
      return isSetFavor();
    case OPPOSE:
      return isSetOppose();
    case TOTAL:
      return isSetTotal();
    case URL:
      return isSetUrl();
    case DEVICE:
      return isSetDevice();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogEvent)
      return this.equals((LogEvent)that);
    return false;
  }

  public boolean equals(LogEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_currentDate = true && this.isSetCurrentDate();
    boolean that_present_currentDate = true && that.isSetCurrentDate();
    if (this_present_currentDate || that_present_currentDate) {
      if (!(this_present_currentDate && that_present_currentDate))
        return false;
      if (!this.currentDate.equals(that.currentDate))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_pollster = true && this.isSetPollster();
    boolean that_present_pollster = true && that.isSetPollster();
    if (this_present_pollster || that_present_pollster) {
      if (!(this_present_pollster && that_present_pollster))
        return false;
      if (!this.pollster.equals(that.pollster))
        return false;
    }

    boolean this_present_favor = true;
    boolean that_present_favor = true;
    if (this_present_favor || that_present_favor) {
      if (!(this_present_favor && that_present_favor))
        return false;
      if (this.favor != that.favor)
        return false;
    }

    boolean this_present_oppose = true;
    boolean that_present_oppose = true;
    if (this_present_oppose || that_present_oppose) {
      if (!(this_present_oppose && that_present_oppose))
        return false;
      if (this.oppose != that.oppose)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + version;

    hashCode = hashCode * 8191 + ((isSetCurrentDate()) ? 131071 : 524287);
    if (isSetCurrentDate())
      hashCode = hashCode * 8191 + currentDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartDate()) ? 131071 : 524287);
    if (isSetStartDate())
      hashCode = hashCode * 8191 + startDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndDate()) ? 131071 : 524287);
    if (isSetEndDate())
      hashCode = hashCode * 8191 + endDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetPollster()) ? 131071 : 524287);
    if (isSetPollster())
      hashCode = hashCode * 8191 + pollster.hashCode();

    hashCode = hashCode * 8191 + favor;

    hashCode = hashCode * 8191 + oppose;

    hashCode = hashCode * 8191 + total;

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetDevice()) ? 131071 : 524287);
    if (isSetDevice())
      hashCode = hashCode * 8191 + device.getValue();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(LogEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentDate()).compareTo(other.isSetCurrentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentDate, other.currentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollster()).compareTo(other.isSetPollster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollster, other.pollster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavor()).compareTo(other.isSetFavor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favor, other.favor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOppose()).compareTo(other.isSetOppose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOppose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oppose, other.oppose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LogEvent(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentDate:");
    if (this.currentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.currentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pollster:");
    if (this.pollster == null) {
      sb.append("null");
    } else {
      sb.append(this.pollster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favor:");
    sb.append(this.favor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oppose:");
    sb.append(this.oppose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("device:");
    if (this.device == null) {
      sb.append("null");
    } else {
      sb.append(this.device);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogEventStandardScheme getScheme() {
      return new LogEventStandardScheme();
    }
  }

  private static class LogEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentDate = iprot.readString();
              struct.setCurrentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POLLSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pollster = iprot.readString();
              struct.setPollsterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAVOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.favor = iprot.readI32();
              struct.setFavorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oppose = iprot.readI32();
              struct.setOpposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.device = DeviceType.findByValue(iprot.readI32());
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.message = LogType.findByValue(iprot.readI32());
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI16(struct.version);
      oprot.writeFieldEnd();
      if (struct.currentDate != null) {
        oprot.writeFieldBegin(CURRENT_DATE_FIELD_DESC);
        oprot.writeString(struct.currentDate);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.pollster != null) {
        oprot.writeFieldBegin(POLLSTER_FIELD_DESC);
        oprot.writeString(struct.pollster);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAVOR_FIELD_DESC);
      oprot.writeI32(struct.favor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPPOSE_FIELD_DESC);
      oprot.writeI32(struct.oppose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.device != null) {
        oprot.writeFieldBegin(DEVICE_FIELD_DESC);
        oprot.writeI32(struct.device.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeI32(struct.message.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogEventTupleScheme getScheme() {
      return new LogEventTupleScheme();
    }
  }

  private static class LogEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentDate()) {
        optionals.set(1);
      }
      if (struct.isSetStartDate()) {
        optionals.set(2);
      }
      if (struct.isSetEndDate()) {
        optionals.set(3);
      }
      if (struct.isSetPollster()) {
        optionals.set(4);
      }
      if (struct.isSetFavor()) {
        optionals.set(5);
      }
      if (struct.isSetOppose()) {
        optionals.set(6);
      }
      if (struct.isSetTotal()) {
        optionals.set(7);
      }
      if (struct.isSetUrl()) {
        optionals.set(8);
      }
      if (struct.isSetDevice()) {
        optionals.set(9);
      }
      if (struct.isSetMessage()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
      if (struct.isSetCurrentDate()) {
        oprot.writeString(struct.currentDate);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetPollster()) {
        oprot.writeString(struct.pollster);
      }
      if (struct.isSetFavor()) {
        oprot.writeI32(struct.favor);
      }
      if (struct.isSetOppose()) {
        oprot.writeI32(struct.oppose);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDevice()) {
        oprot.writeI32(struct.device.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeI32(struct.message.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currentDate = iprot.readString();
        struct.setCurrentDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pollster = iprot.readString();
        struct.setPollsterIsSet(true);
      }
      if (incoming.get(5)) {
        struct.favor = iprot.readI32();
        struct.setFavorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.oppose = iprot.readI32();
        struct.setOpposeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.device = DeviceType.findByValue(iprot.readI32());
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.message = LogType.findByValue(iprot.readI32());
        struct.setMessageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

